<style type="text/css">
    #canvas {
        position: fixed;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        z-index: 10;
    }
</style>

<div id="canvas"></div>

<script src="~/Scripts/graph/raphael-min.js"></script>
<script src="~/Scripts/graph/dracula_graffle.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/graph/dracula_graph.js"></script>
<script src="~/Scripts/graph/dracula_algorithms.js"></script>

<script type="text/javascript">
    function GraphData(data) {
        this.Name = data.Name;
        this.Tag = data.Tag;
        this.TradeId = data.TradeId;
        this.UserName = data.UserName;
        this.TargetId = data.TargetId;
    }

    var mappedItems;
    var redraw, g, renderer;

    $(function () {
        var itemId = window.location.hash.substr(1);

        //AC53DC06-5067-4A52-8D73-1C9AE35C481F

        $.ajax("/api/graph/data?id=" + itemId, {
            type: "get",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                mappedItems = $.map(result, function (data) { return new GraphData(data) });

                if (mappedItems != null && mappedItems.length > 0) {
                    var g = new Graph();
                    for (var i = 0; i < mappedItems.length ; i++) {
                        g.addNode(mappedItems[i].TradeId, { label: mappedItems[i].UserName + " >> " + mappedItems[i].Name });

                        if (mappedItems[i].TargetId != null) {
                            g.addEdge(mappedItems[i].TradeId, mappedItems[i].TargetId, { directed: true });
                        }
                    }

                    /* layout the graph using the Spring layout implementation */
                    var layouter = new Graph.Layout.Spring(g);
                    layouter.layout();

                    var viewPortWidth;
                    var viewPortHeight;

                    if (typeof window.innerWidth != 'undefined') {
                        // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
                        viewPortWidth = window.innerWidth,
                        viewPortHeight = window.innerHeight
                    }
                    else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0) {
                        // IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
                        viewPortWidth = document.documentElement.clientWidth,
                        viewPortHeight = document.documentElement.clientHeight
                    }
                    else {
                        // older versions of IE
                        viewPortWidth = document.getElementsByTagName('body')[0].clientWidth,
                        viewPortHeight = document.getElementsByTagName('body')[0].clientHeight
                    }

                    //var width = $(document).width() - 20;
                    //var height = $(document).height() - 60;

                    /* draw the graph using the RaphaelJS draw implementation */
                    var renderer = new Graph.Renderer.Raphael('canvas', g, viewPortWidth, viewPortHeight);
                    renderer.draw();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                //DangerMessage(errorThrown);
            }
        });
    });

    ///* First: Write a custom node render function. */
    //var render = function (r, n) {
    //    /* the Raphael set is obligatory, containing all you want to display */
    //    var set = r.set().push(
    //        /* custom objects go here */
    //        r.rect(n.point[0] - 30, n.point[1] - 13, 62, 86)
    //            .attr({ "fill": "#fa8", "stroke-width": 2, r: "9px" }))
    //            .push(r.text(n.point[0], n.point[1] + 30, n.label)
    //                .attr({ "font-size": "20px" }));
    //    /* custom tooltip attached to the set */
    //    set.items.forEach(
    //        function (el) {
    //            el.tooltip(r.set().push(r.rect(0, 0, 30, 30)
    //                .attr({ "fill": "#fec", "stroke-width": 1, r: "9px" })))
    //        });
    //    return set;
    //};
</script>